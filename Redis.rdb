Microsoft Windows [Version 10.0.19045.3930]
(c) Microsoft Corporation. All rights reserved.

C:\Users\aishn>docker ps
CONTAINER ID   IMAGE                      COMMAND            CREATED        STATUS         PORTS                                            NAMES
b43eba29db66   redis/redis-stack:latest   "/entrypoint.sh"   36 hours ago   Up 2 minutes   0.0.0.0:6379->6379/tcp, 0.0.0.0:8001->8001/tcp   redis-stack

C:\Users\aishn>docker exec -it b43eba29db66
"docker exec" requires at least 2 arguments.
See 'docker exec --help'.

Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

Execute a command in a running container

C:\Users\aishn>docker exec -it b43eba29db66 bash
root@b43eba29db66:/# redis cli
bash: redis: command not found
root@b43eba29db66:/# redis-cli
127.0.0.1:6379> ping
PONG
127.0.0.1:6379> ok
(error) ERR unknown command 'ok', with args beginning with:
127.0.0.1:6379> ping
PONG

///////////////////////////////////// String ///////////////////////////////////////////


127.0.0.1:6379> set user:1 Aish
OK
127.0.0.1:6379> get user:!
(nil)
127.0.0.1:6379> get user:1
"Aish"
127.0.0.1:6379> get user:1
"Aish nik"
127.0.0.1:6379> set user:2
(error) ERR wrong number of arguments for 'set' command
127.0.0.1:6379> set user:2 'garry'
OK
127.0.0.1:6379> set msg:1 'send'
OK
127.0.0.1:6379> get msg:1
"send"
127.0.0.1:6379> set msg:2 'okay'
OK
127.0.0.1:6379> get user:1 nx
(error) ERR wrong number of arguments for 'get' command
127.0.0.1:6379> get user:1 nx hello
(error) ERR wrong number of arguments for 'get' command
127.0.0.1:6379> set user:1 nx hello
(error) ERR syntax error
127.0.0.1:6379> set user:1 hello nx
// use of nx = dont change it if user:1 exists
(nil)
127.0.0.1:6379> set user:1 hello
OK
127.0.0.1:6379> mget user:1 msg:2 msg:1
1) "hello"
2) "okay"
3) "send"
127.0.0.1:6379>


127.0.0.1:6379> set count:1 10
OK
127.0.0.1:6379> get count:!
(nil)
127.0.0.1:6379> get count:1
"10"
127.0.0.1:6379> incr count:1
(integer) 11
127.0.0.1:6379> incr count:1
(integer) 12
127.0.0.1:6379> incr count:1 by 10
(error) ERR wrong number of arguments for 'incr' command
127.0.0.1:6379> incrby count:1 10
(integer) 22
127.0.0.1:6379>


// single redis string can be max of 512 mb

http://localhost:8001/redis-stack/browser = redis gui



        /////////////////////////// List //////////////////////////////

127.0.0.1:6379> lpush series:1 spidy
(integer) 1
127.0.0.1:6379> lpush series:1 thor
(integer) 2
127.0.0.1:6379> rpush series:1 ironman
(integer) 3


///////////////////////////////// set ///////////////////////////////////////////


can only add unique keys

root@b43eba29db66:/# redis-cli
127.0.0.1:6379> sadd ip 1
(integer) 1
127.0.0.1:6379> sadd ip 2
(integer) 1
127.0.0.1:6379> sadd ip 3
(integer) 1
127.0.0.1:6379> sadd ip 3
(integer) 0
127.0.0.1:6379> sadd ip 2
(integer) 0
127.0.0.1:6379>

1 = true
0 = false

(integer) 0
127.0.0.1:6379> srem ip 2
(integer) 1
127.0.0.1:6379> sismember ip 2
(integer) 0
127.0.0.1:6379> sadd address 1
(integer) 1
127.0.0.1:6379> sadd address 2
(integer) 1
127.0.0.1:6379> sinter ip address
1) "1"

set key max size 2^32-1

///////////////////////////////////////// orderd sets priority queue ///////////////////////////////

127.0.0.1:6379> zadd score 10 aish
(integer) 1
127.0.0.1:6379> zadd score 5 nik
(integer) 1
127.0.0.1:6379> zadd score 2
(error) ERR wrong number of arguments for 'zadd' command
127.0.0.1:6379> zadd score jj
(error) ERR wrong number of arguments for 'zadd' command
127.0.0.1:6379> zadd score 3 avi
(integer) 1


As you can see ZADD is similar to SADD, but takes one additional argument (placed before the element to be added) which is the score
Implementation note: Sorted sets are implemented via a dual-ported data structure containing both a skip list and a hash table, so every time we add an element Redis performs an O(log(N)) operation. That's good, but when we ask for sorted elements Redis does not have to do any work at all, it's already sorted.
You can think of sorted sets as a mix between a Set and a Hash. Like sets, sorted sets are composed of unique, non-repeating string elements, so in some sense a sorted set is a set as well.

However while elements inside sets are not ordered, every element in a sorted set is associated with a floating point value, called the score (this is why the type is also similar to a hash, since every element is mapped to a value).


127.0.0.1:6379> zrange score 0 -1
1) "avi"
2) "nik"
3) "aish"
127.0.0.1:6379> zreverserange score 0 -1
(error) ERR unknown command 'zreverserange', with args beginning with: 'score' '0' '-1'
127.0.0.1:6379> zrevrange score 0 -1
1) "aish"
2) "nik"
3) "avi"



//////////////////////////////////// Redis Streams //////////////////////////////
// it takes every second data

A Redis stream is a data structure that acts like an append-only log but also implements several operations to overcome some of the limits of a typical append-only log. These include random access in O(1) time and complex consumption strategies, such as consumer groups. You can use streams to record and simultaneously syndicate events in real time. Examples of Redis stream use cases include:

Event sourcing (e.g., tracking user actions, clicks, etc.)
Sensor monitoring (e.g., readings from devices in the field)
Notifications (e.g., storing a record of each user's notifications in a separate stream)
Redis generates a unique ID for each stream entry. You can use these IDs to retrieve their associated entries later or to read and process all subsequent entries in the stream. Note that because these IDs are related to time, the ones shown here may vary and will be different from the IDs you see in your own Redis instance.

XADD adds a new entry to a stream.
XREAD reads one or more entries, starting at a given position and moving forward in time.
XRANGE returns a range of entries between two supplied entry IDs.
XLEN returns the length of a stream.

